# The idea is NOT to download everything to a temporary folder and then tar it,
# because it could needlessly require too much free space.

# One option is to download everything (s5cmd seems the fastest https://medium.com/@joshua_robinson/s5cmd-for-high-performance-object-storage-7071352cc09d)
# and use `tar --remove-files`, as it deletes files after adding then to the archive.

# The option used here is: mount the bucket with goofys (https://github.com/kahing/goofys#readme)
# and tar from there.

- name: download and install goofys
  get_url:
    dest: /usr/local/bin/goofys
    url: https://github.com/kahing/goofys/releases/download/v0.23.1/goofys
    mode: 0755
    checksum: sha256:c47c6d2038ad62663c493d35e97b98826b30f23037013b64567c334c6ce82a34
  become: true
  # Improvement: also install some FUSE stuff that is already included in Ubuntu.

- name: get S3 configuration from local_settings
  command: >
    pipenv run ./manage.py shell -c
    "import json;
    from django.conf import settings;
    print(json.dumps({
      'key_id': settings.AWS_ACCESS_KEY_ID,
      'key_secret': settings.AWS_SECRET_ACCESS_KEY,
      'endpoint': settings.AWS_S3_ENDPOINT_URL,
      'bucket': settings.AWS_STORAGE_BUCKET_NAME,
      'media_dir': settings.S3_MEDIA_DIR,
    }))"
  args:
    chdir: "{{ server_root_dir }}"
  no_log: yes   # Prevents printing key_secret. Comment this line to debug this task.
  changed_when: false
  register: s3_conf

- name: set S3 configuration
  set_fact:
    s3_conf: "{{ s3_conf.stdout | from_json }}"
  no_log: yes

- name: create mountpoint
  tempfile:
    state: directory
    prefix: s3.
    suffix: .{{ s3_conf.bucket }}
  register: s3_mountpoint

- name: archive Media in S3
  block:
    - name: mount bucket
      command:
        argv:
          - goofys
          - --endpoint={{ s3_conf.endpoint }}
          - -o=ro   # read-only
          - "{{ s3_conf.bucket }}:{{ s3_conf.media_dir }}"
          - "{{ s3_mountpoint.path }}"
      environment:
        AWS_ACCESS_KEY_ID: "{{ s3_conf.key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ s3_conf.key_secret }}"

    - name: archive bucket
      archive:
        path: "{{ s3_mountpoint.path }}"
        dest: "{{ archive_name }}"

  always:
    - name: unmount bucket
      command: fusermount -u {{ s3_mountpoint.path }}
      failed_when: false    # ignore and continue with next task

    - name: remove mountpoint
      command: rmdir {{ s3_mountpoint.path }}
      args:
        warn: no    # Suggests to use "file"  https://github.com/ansible/ansible/issues/22248
